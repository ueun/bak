1.一切（引用类型）都是对象，对象是属性的集合。

      undefined, number, string, boolean属于简单的值类型，通过typeof来判断；函数、数组、对象、null都是引用类型，通过instanceof来判断。对象里面的一切都是属性，只有属性，没有方法，它的属性表示为键值对的形式。一切引用类型都是对象，对象都是通过函数来创建的。

2.prototype原型

     每一个函数都有一个属性叫做prototype，每一个对象(注也包括函数)都有一个属性叫做_proto_，其实可以把_proto_叫做隐式原型。 每一个函数的prototype属性值是一个对象（属性的集合，再次强调！），默认的只有一个叫做constructor的属性，指向这个函数本身。每一个对象都有一个属性叫做_proto_，指向创建该对象的函数的prototype。但是Object.prototype确实一个特例——它的__proto__指向的是null。

3。理解instanceof

Instanceof的判断规则是：沿着A的__proto__这条线来找，同时沿着B的prototype这条线来找，如果两条线能找到同一个引用，即同一个对象，那么就返回true。如果找到终点还未重合，则返回false。


4.原型链和继承

   访问一个对象的属性时，先在基本属性中查找，如果没有，再沿着__proto__这条链向上找，这就是原型链。根据原型链可以确定继承关系。由于所有的对象的原型链都会找到Object.prototype，因此所有的对象都会有Object.prototype的方法。这就是所谓的“继承”。

实际应用中如何区分一个属性到底是基本的还是从原型中找到的呢？大家可能知道答案——hasOwnProperty，特别是在for…in…循环中，一定要注意。

闭包

为了保护私有属性或者不污染全局环境而将变量等放置在一个函数中，使他们处于函数作用域中，这个方法有个专有名词，就叫做闭包。

JavaScript中的继承方式有两种，一种是通过call或apply方法借用构造函数，另一种方法则是通过原型来继承。


闭包：

　　　　1.闭包最常用的方式就是返回一个内联函数（何为内联函数？就是在函数内部声明的函数）；

　　　　2.在JavaScript中有作用域和执行环境的问题，在函数内部的变量在函数外部是无法访问的，在函数内部却可以得到全局变量。由于种种原因，我们有时候需要得到函数内部的变量，可是用常规方法是得不到的，这时我们就可以创建一个闭包，用来在外部访问这个变量。

　　　　3.闭包的用途 主要就是上一点提到的读取函数内部变量，还有一个作用就是可以使这些变量一直保存在内存中。

　　　　4.使用闭包要注意，由于变量被保存在内存中，所以会对内存造成消耗，所以不能滥用闭包。解决方法是 在退出函数之前，将不使用的局部变量全部删除。

封装：通过将一个方法或者属性声明为私用的，可以让对象的实现细节对其他对象保密以降低对象之间的耦合程度，可以保持数据的完整性并对其修改方式加以约束，这样可以是代码更可靠，更易于调试。封装是面向对象的设计的基石。

　　尽管JavaScript是一门面向对象的语言，可它并不具备将成员声明为公用或私用的任何内部机制，所以我们只能自己想办法实现这种特性。下面还是通过一套完整的代码去分析，介绍什么是私有属性和方法，什么是特权属性和方法，什么是公有属性和方法，什么是公有静态属性和方法。

　　私有属性和方法：函数有作用域，在函数内用var 关键字声明的变量在外部无法访问，私有属性和方法本质就是你希望在对象外部无法访问的变量。

　　特权属性和方法：创建属性和方法时使用的this关键字，因为这些方法定义在构造器的作用域中，所以它们可以访问到私有属性和方法；只有那些需要直接访问私有成员的方法才应该被设计为特权方法。

　　共有属性和方法：直接链在prototype上的属性和方法，不可以访问构造器内的私有成员，可以访问特权成员，子类会继承所有的共有方法。

　　共有静态属性和方法：最好的理解方式就是把它想象成一个命名空间，实际上相当于把构造器作为命名空间来使用。

继承：继承本身就是一个抽象的话题，在JavaScript中继承更是一个复杂的话题，因为JavaScript想要实现继承有两种实现方式，分别是类式继承和原型式继承，每种实现的方式都需要采取不少措施，下面本人通过分析例子的方式讲解JavaScript中这个很重要的话题。
